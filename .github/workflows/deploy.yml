name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  build-frontend:
    runs-on: ubuntu-latest
    name: Build Frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        working-directory: ./mr-r-sushi
        run: npm install

      - name: Build project
        working-directory: ./mr-r-sushi
        run: |
          # Use the CI build script that skips TypeScript checking
          npm run ci-build

          # Verify build was created
          if [ -d "dist" ]; then
            echo "Build completed"
          else
            echo "Build failed completely"
            exit 1
          fi

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: mr-r-sushi/dist/

  build-backend:
    runs-on: ubuntu-latest
    name: Build Backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore dependencies
        run: dotnet restore Mr.R_Sushi.sln

      - name: Build backend
        run: dotnet build Mr.R_Sushi.sln --configuration Release --no-restore

      - name: Publish API
        run: dotnet publish Mr.R_Sushi/mr-r-sushi-api/MrRSushiApi/MrRSushiApi.csproj -c Release -o ./publish

      - name: Upload backend artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-build
          path: ./publish/

  deploy:
    needs: [build-frontend, build-backend]
    runs-on: ubuntu-latest
    name: Deploy to EC2

    steps:
      - name: Download frontend artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: ./frontend-dist

      - name: Download backend artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-build
          path: ./backend-dist

      - name: Create deployment scripts
        run: |
          # Create systemd service file for the backend API
          cat > mrrsushi-api.service << 'EOF'
          [Unit]
          Description=Mr. R Sushi API Service
          After=network.target

          [Service]
          WorkingDirectory=/var/www/api
          ExecStart=/home/ec2-user/dotnet/dotnet /var/www/api/MrRSushiApi.dll
          Restart=always
          RestartSec=10
          SyslogIdentifier=mrrsushi-api
          User=ec2-user
          Environment=ASPNETCORE_ENVIRONMENT=Production
          Environment=ASPNETCORE_URLS=http://localhost:5000

          [Install]
          WantedBy=multi-user.target
          EOF

          # Create Nginx config for routing
          cat > nginx.conf << 'EOF'
          server {
              listen 80;
              server_name sushi.jobjourney.me;
              
              # Redirect all HTTP to HTTPS
              location / {
                  return 301 https://$host$request_uri;
              }
          }

          server {
              listen 443 ssl;
              server_name sushi.jobjourney.me;
              
              # SSL Certificate
              ssl_certificate /etc/nginx/ssl/cert.pem;
              ssl_certificate_key /etc/nginx/ssl/key.pem;
              
              # Basic SSL settings
              ssl_protocols TLSv1.2 TLSv1.3;
              
              # Frontend files
              root /var/www/html;
              index index.html;
              
              # Handle frontend (SPA) routes
              location / {
                  try_files $uri $uri/ /index.html;
              }
              
              # API routes - proxy to ASP.NET Core app
              location /api/ {
                  proxy_pass http://localhost:5000;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection keep-alive;
                  proxy_set_header Host $host;
                  proxy_cache_bypass $http_upgrade;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
              }
              
              # Cache static assets
              location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
                  expires 30d;
                  add_header Cache-Control "public, no-transform";
              }
          }
          EOF

      - name: Prepare directories on EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Frontend directory
            sudo mkdir -p /var/www/html
            sudo rm -rf /var/www/html/*

            # Backend directory
            sudo mkdir -p /var/www/api
            sudo rm -rf /var/www/api/*

            # Set permissions
            sudo chown -R ec2-user:ec2-user /var/www/html
            sudo chown -R ec2-user:ec2-user /var/www/api

      - name: Deploy frontend files
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: 'frontend-dist/**'
          target: '/var/www/html'
          strip_components: 1
          debug: true

      - name: Deploy backend files
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: 'backend-dist/**'
          target: '/var/www/api'
          strip_components: 1
          debug: true

      - name: Deploy configuration files
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: 'mrrsushi-api.service,nginx.conf'
          target: '/home/ec2-user'
          strip_components: 0
          debug: true

      - name: Configure services and Nginx
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Verify dotnet is installed
            if ! command -v dotnet &> /dev/null; then
              # Check if dotnet is in the home directory
              if [ -f "/home/ec2-user/dotnet/dotnet" ]; then
                echo "Found dotnet in home directory"
              else
                echo "Installing .NET runtime..."
                # Setup Microsoft package repository
                sudo rpm -Uvh https://packages.microsoft.com/config/centos/7/packages-microsoft-prod.rpm
                
                # Update package lists
                sudo yum update -y
                
                # Install .NET runtime
                sudo yum install -y aspnetcore-runtime-9.0
              fi
            fi

            # Install Nginx if not already installed
            if ! command -v nginx &> /dev/null; then
              sudo amazon-linux-extras install nginx1 -y || sudo yum install nginx -y
            fi

            # Create SSL directory if it doesn't exist
            sudo mkdir -p /etc/nginx/ssl
            sudo chmod 700 /etc/nginx/ssl

            # Upload Cloudflare certificate and key with proper permissions
            echo "${{ secrets.SSL_CERT }}" | sudo tee /etc/nginx/ssl/cert.pem > /dev/null
            echo "${{ secrets.SSL_KEY }}" | sudo tee /etc/nginx/ssl/key.pem > /dev/null
            sudo chmod 600 /etc/nginx/ssl/cert.pem /etc/nginx/ssl/key.pem

            # Debug certificate
            echo "Checking SSL certificate validity..."
            sudo openssl x509 -in /etc/nginx/ssl/cert.pem -text -noout || echo "Certificate issue!"

            # Configure Nginx with our config
            sudo mv /home/ec2-user/nginx.conf /etc/nginx/conf.d/default.conf

            # Install the API systemd service
            sudo mv /home/ec2-user/mrrsushi-api.service /etc/systemd/system/

            # Reload systemd and enable the service
            sudo systemctl daemon-reload
            sudo systemctl enable mrrsushi-api.service

            # Start/restart the services
            sudo systemctl restart mrrsushi-api.service
            sudo systemctl restart nginx

            # Check service status
            echo "API service status:"
            sudo systemctl status mrrsushi-api.service

            echo "Nginx service status:"
            sudo systemctl status nginx

            # Add debugging information
            echo "Checking if API is listening on port 5000:"
            sudo netstat -tulpn | grep 5000 || echo "API not listening on port 5000!"

            echo "Checking API logs:"
            sudo journalctl -u mrrsushi-api.service --no-pager -n 50

            echo "Checking Nginx error logs:"
            sudo tail -n 50 /var/log/nginx/error.log

            echo "Checking permissions on API files:"
            ls -la /var/www/api/

            echo "Checking environment variables:"
            printenv | grep ASPNET

            echo "Deployed successfully!"
