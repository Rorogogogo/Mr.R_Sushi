name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Navigate to project directory
        run: cd mr-r-sushi

      - name: Install dependencies
        working-directory: ./mr-r-sushi
        run: npm install

      - name: Build project
        working-directory: ./mr-r-sushi
        run: |
          # Use the CI build script that skips TypeScript checking
          npm run ci-build

          # Verify build was created
          if [ -d "dist" ]; then
            echo "Build completed"
          else
            echo "Build failed completely"
            exit 1
          fi

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: mr-r-sushi/dist/

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build-output
          path: ./dist

      - name: Prepare directory on EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            sudo mkdir -p /var/www/html
            sudo rm -rf /var/www/html/*
            sudo chown -R ec2-user:ec2-user /var/www/html

      - name: Deploy files
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: 'dist/**'
          target: '/var/www/html'
          strip_components: 1
          debug: true

      - name: Set up Nginx with SSL
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Install Nginx if not already installed
            if ! command -v nginx &> /dev/null; then
              sudo amazon-linux-extras install nginx1 -y || sudo yum install nginx -y
            fi

            # Create SSL directory
            sudo mkdir -p /etc/nginx/ssl
            sudo chmod 700 /etc/nginx/ssl

            # Upload Cloudflare certificate and key with proper permissions
            echo "${{ secrets.SSL_CERT }}" | sudo tee /etc/nginx/ssl/cert.pem > /dev/null
            echo "${{ secrets.SSL_KEY }}" | sudo tee /etc/nginx/ssl/key.pem > /dev/null
            sudo chmod 600 /etc/nginx/ssl/cert.pem /etc/nginx/ssl/key.pem

            # Debug certificate
            echo "Checking SSL certificate validity..."
            sudo openssl x509 -in /etc/nginx/ssl/cert.pem -text -noout || echo "Certificate issue!"

            # Configure Nginx with simplified SSL settings
            sudo tee /etc/nginx/conf.d/default.conf > /dev/null << 'EOF'
            server {
                listen 80;
                server_name _;
                
                # Redirect all HTTP to HTTPS
                location / {
                    root /var/www/html;
                    index index.html;
                    try_files $uri $uri/ /index.html;
                }
            }

            server {
                listen 443 ssl;
                server_name _;
                
                # SSL Certificate
                ssl_certificate /etc/nginx/ssl/cert.pem;
                ssl_certificate_key /etc/nginx/ssl/key.pem;
                
                # Basic SSL settings
                ssl_protocols TLSv1.2 TLSv1.3;
                
                # Root directory
                root /var/www/html;
                index index.html;
                
                # Handle Single Page Application routing
                location / {
                    try_files $uri $uri/ /index.html;
                }
                
                # Cache static assets
                location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
                    expires 30d;
                    add_header Cache-Control "public, no-transform";
                }
            }
            EOF

            # Check Nginx configuration
            echo "Checking Nginx configuration..."
            sudo nginx -t

            # Ensure ports are open for SELinux if applicable
            if command -v setsebool &> /dev/null; then
              sudo setsebool -P httpd_can_network_connect 1
            fi

            # Check if port 443 is listening
            echo "Checking if port 443 is listening..."
            sudo netstat -tulpn | grep :443 || echo "Port 443 is not listening!"

            # Restart Nginx
            sudo systemctl restart nginx

            # Enable Nginx to start on boot
            sudo systemctl enable nginx

            # Check Nginx service status
            echo "Nginx service status:"
            sudo systemctl status nginx

            # Remind user about security group
            echo "Remember to ensure your EC2 security group allows traffic on port 443 (HTTPS)"
